-- ============================================
-- College Attendance Management System Database
-- ============================================

-- Drop existing database if it exists and create new one
DROP DATABASE IF EXISTS attendance_db;
CREATE DATABASE attendance_db;
USE attendance_db;

-- ============================================
-- TABLE: courses
-- Stores information about different courses
-- ============================================
CREATE TABLE courses (
  course_id INT AUTO_INCREMENT PRIMARY KEY,
  course_code VARCHAR(10) NOT NULL UNIQUE,
  course_name VARCHAR(100) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  INDEX idx_course_code (course_code)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ============================================
-- TABLE: classes
-- Stores class information linked to courses
-- ============================================
CREATE TABLE classes (
  class_code VARCHAR(20) PRIMARY KEY,
  class_name VARCHAR(100) NOT NULL,
  course_id INT NOT NULL,
  year INT NOT NULL CHECK (year BETWEEN 1 AND 3),
  section VARCHAR(5) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE,
  INDEX idx_course_id (course_id),
  INDEX idx_year_section (year, section)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ============================================
-- TABLE: students
-- Stores student information
-- ============================================
CREATE TABLE students (
  student_id VARCHAR(20) PRIMARY KEY,
  student_name VARCHAR(100) NOT NULL,
  email VARCHAR(100),
  phone VARCHAR(15),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  INDEX idx_student_name (student_name)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ============================================
-- TABLE: enrollments
-- Links students to classes (many-to-many)
-- ============================================
CREATE TABLE enrollments (
  enrollment_id INT AUTO_INCREMENT PRIMARY KEY,
  student_id VARCHAR(20) NOT NULL,
  class_code VARCHAR(20) NOT NULL,
  enrolled_date DATE DEFAULT (CURRENT_DATE),
  FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
  FOREIGN KEY (class_code) REFERENCES classes(class_code) ON DELETE CASCADE,
  UNIQUE KEY unique_enrollment (student_id, class_code),
  INDEX idx_student_id (student_id),
  INDEX idx_class_code (class_code)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ============================================
-- TABLE: attendance
-- Stores daily attendance records
-- ============================================
CREATE TABLE attendance (
  attendance_id INT AUTO_INCREMENT PRIMARY KEY,
  student_id VARCHAR(20) NOT NULL,
  class_code VARCHAR(20) NOT NULL,
  attendance_date DATE NOT NULL,
  status ENUM('present', 'absent') NOT NULL,
  marked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
  FOREIGN KEY (class_code) REFERENCES classes(class_code) ON DELETE CASCADE,
  UNIQUE KEY unique_attendance (student_id, class_code, attendance_date),
  INDEX idx_student_class (student_id, class_code),
  INDEX idx_date (attendance_date),
  INDEX idx_status (status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ============================================
-- SAMPLE DATA INSERTION
-- ============================================

-- Insert sample courses
INSERT INTO courses (course_code, course_name) VALUES
('BCA', 'Bachelor of Computer Applications'),
('BCOM', 'Bachelor of Commerce'),
('BBA', 'Bachelor of Business Administration');

-- Insert sample classes
INSERT INTO classes (class_code, class_name, course_id, year, section) VALUES
('BCA-1-A', 'BCA 1st Year Section A', 1, 1, 'A'),
('BCA-2-A', 'BCA 2nd Year Section A', 1, 2, 'A'),
('BCA-3-A', 'BCA 3rd Year Section A', 1, 3, 'A'),
('BCOM-1-A', 'BCOM 1st Year Section A', 2, 1, 'A'),
('BCOM-1-B', 'BCOM 1st Year Section B', 2, 1, 'B'),
('BBA-1-A', 'BBA 1st Year Section A', 3, 1, 'A');

-- Insert sample students
INSERT INTO students (student_id, student_name, email, phone) VALUES
('S101', 'Rahul Sharma', 'rahul.sharma@college.edu', '9876543210'),
('S102', 'Priya Patel', 'priya.patel@college.edu', '9876543211'),
('S103', 'Amit Kumar', 'amit.kumar@college.edu', '9876543212'),
('S104', 'Sneha Singh', 'sneha.singh@college.edu', '9876543213'),
('S105', 'Vikas Verma', 'vikas.verma@college.edu', '9876543214'),
('S106', 'Anjali Gupta', 'anjali.gupta@college.edu', '9876543215'),
('S107', 'Rajesh Reddy', 'rajesh.reddy@college.edu', '9876543216'),
('S108', 'Pooja Mehta', 'pooja.mehta@college.edu', '9876543217'),
('S109', 'Suresh Nair', 'suresh.nair@college.edu', '9876543218'),
('S110', 'Kavita Joshi', 'kavita.joshi@college.edu', '9876543219');

-- Enroll students in classes
INSERT INTO enrollments (student_id, class_code) VALUES
-- BCA 1st Year Section A
('S101', 'BCA-1-A'),
('S102', 'BCA-1-A'),
('S103', 'BCA-1-A'),
('S104', 'BCA-1-A'),
-- BCA 2nd Year Section A
('S105', 'BCA-2-A'),
('S106', 'BCA-2-A'),
-- BCOM 1st Year Section A
('S107', 'BCOM-1-A'),
('S108', 'BCOM-1-A'),
-- BCOM 1st Year Section B
('S109', 'BCOM-1-B'),
('S110', 'BCOM-1-B');

-- Insert sample attendance records (last 7 days)
INSERT INTO attendance (student_id, class_code, attendance_date, status) VALUES
-- Today
('S101', 'BCA-1-A', CURDATE(), 'present'),
('S102', 'BCA-1-A', CURDATE(), 'present'),
('S103', 'BCA-1-A', CURDATE(), 'absent'),
('S104', 'BCA-1-A', CURDATE(), 'present'),
('S105', 'BCA-2-A', CURDATE(), 'present'),
('S106', 'BCA-2-A', CURDATE(), 'present'),

-- Yesterday
('S101', 'BCA-1-A', DATE_SUB(CURDATE(), INTERVAL 1 DAY), 'present'),
('S102', 'BCA-1-A', DATE_SUB(CURDATE(), INTERVAL 1 DAY), 'absent'),
('S103', 'BCA-1-A', DATE_SUB(CURDATE(), INTERVAL 1 DAY), 'present'),
('S104', 'BCA-1-A', DATE_SUB(CURDATE(), INTERVAL 1 DAY), 'present'),

-- 2 days ago
('S101', 'BCA-1-A', DATE_SUB(CURDATE(), INTERVAL 2 DAY), 'present'),
('S102', 'BCA-1-A', DATE_SUB(CURDATE(), INTERVAL 2 DAY), 'present'),
('S103', 'BCA-1-A', DATE_SUB(CURDATE(), INTERVAL 2 DAY), 'present'),
('S104', 'BCA-1-A', DATE_SUB(CURDATE(), INTERVAL 2 DAY), 'absent'),

-- 3 days ago
('S107', 'BCOM-1-A', DATE_SUB(CURDATE(), INTERVAL 3 DAY), 'present'),
('S108', 'BCOM-1-A', DATE_SUB(CURDATE(), INTERVAL 3 DAY), 'present'),
('S109', 'BCOM-1-B', DATE_SUB(CURDATE(), INTERVAL 3 DAY), 'absent'),
('S110', 'BCOM-1-B', DATE_SUB(CURDATE(), INTERVAL 3 DAY), 'present');

-- ============================================
-- USEFUL VIEWS
-- ============================================

-- View: Student attendance summary
CREATE VIEW student_attendance_summary AS
SELECT 
  s.student_id,
  s.student_name,
  c.class_code,
  c.class_name,
  co.course_code,
  COUNT(a.attendance_date) AS total_classes,
  SUM(CASE WHEN a.status = 'present' THEN 1 ELSE 0 END) AS present_count,
  SUM(CASE WHEN a.status = 'absent' THEN 1 ELSE 0 END) AS absent_count,
  ROUND(100 * SUM(CASE WHEN a.status = 'present' THEN 1 ELSE 0 END) / 
        NULLIF(COUNT(a.attendance_date), 0), 2) AS attendance_percentage
FROM students s
JOIN enrollments e ON s.student_id = e.student_id
JOIN classes c ON e.class_code = c.class_code
JOIN courses co ON c.course_id = co.course_id
LEFT JOIN attendance a ON s.student_id = a.student_id AND c.class_code = a.class_code
GROUP BY s.student_id, s.student_name, c.class_code, c.class_name, co.course_code;

-- View: Class attendance summary
CREATE VIEW class_attendance_summary AS
SELECT 
  c.class_code,
  c.class_name,
  co.course_code,
  co.course_name,
  COUNT(DISTINCT e.student_id) AS total_students,
  COUNT(DISTINCT a.attendance_date) AS classes_held,
  SUM(CASE WHEN a.status = 'present' THEN 1 ELSE 0 END) AS total_present,
  SUM(CASE WHEN a.status = 'absent' THEN 1 ELSE 0 END) AS total_absent
FROM classes c
JOIN courses co ON c.course_id = co.course_id
LEFT JOIN enrollments e ON c.class_code = e.class_code
LEFT JOIN attendance a ON c.class_code = a.class_code
GROUP BY c.class_code, c.class_name, co.course_code, co.course_name;

-- ============================================
-- USEFUL STORED PROCEDURES
-- ============================================

-- Procedure: Get attendance report for a date range
DELIMITER //
CREATE PROCEDURE GetAttendanceReport(
  IN p_class_code VARCHAR(20),
  IN p_start_date DATE,
  IN p_end_date DATE
)
BEGIN
  SELECT 
    s.student_id,
    s.student_name,
    a.attendance_date,
    a.status
  FROM students s
  JOIN enrollments e ON s.student_id = e.student_id
  LEFT JOIN attendance a ON s.student_id = a.student_id 
    AND a.class_code = p_class_code
    AND a.attendance_date BETWEEN p_start_date AND p_end_date
  WHERE e.class_code = p_class_code
  ORDER BY s.student_id, a.attendance_date;
END //
DELIMITER ;

-- Procedure: Calculate attendance percentage for a student
DELIMITER //
CREATE PROCEDURE GetStudentAttendancePercentage(
  IN p_student_id VARCHAR(20),
  IN p_class_code VARCHAR(20)
)
BEGIN
  SELECT 
    s.student_id,
    s.student_name,
    c.class_name,
    COUNT(a.attendance_date) AS total_classes,
    SUM(CASE WHEN a.status = 'present' THEN 1 ELSE 0 END) AS present_count,
    ROUND(100 * SUM(CASE WHEN a.status = 'present' THEN 1 ELSE 0 END) / 
          NULLIF(COUNT(a.attendance_date), 0), 2) AS attendance_percentage
  FROM students s
  JOIN classes c ON c.class_code = p_class_code
  LEFT JOIN attendance a ON s.student_id = a.student_id 
    AND a.class_code = p_class_code
  WHERE s.student_id = p_student_id
  GROUP BY s.student_id, s.student_name, c.class_name;
END //
DELIMITER ;

-- ============================================
-- VERIFICATION QUERIES
-- ============================================

-- Show all tables
SELECT 'Tables created successfully!' AS Status;
SHOW TABLES;

-- Show record counts
SELECT 'courses' AS table_name, COUNT(*) AS record_count FROM courses
UNION ALL
SELECT 'classes', COUNT(*) FROM classes
UNION ALL
SELECT 'students', COUNT(*) FROM students
UNION ALL
SELECT 'enrollments', COUNT(*) FROM enrollments
UNION ALL
SELECT 'attendance', COUNT(*) FROM attendance;

-- Show sample data
SELECT 'Sample Courses:' AS Info;
SELECT * FROM courses;

SELECT 'Sample Classes:' AS Info;
SELECT * FROM classes;

SELECT 'Sample Students:' AS Info;
SELECT * FROM students LIMIT 5;

SELECT 'Sample Attendance Summary:' AS Info;
SELECT * FROM student_attendance_summary;

-- ============================================
-- USAGE EXAMPLES
-- ============================================

/*
-- Example 1: Get attendance report for a class
CALL GetAttendanceReport('BCA-1-A', '2024-10-01', '2024-10-06');

-- Example 2: Get student attendance percentage
CALL GetStudentAttendancePercentage('S101', 'BCA-1-A');

-- Example 3: Find students with low attendance (below 75%)
SELECT * FROM student_attendance_summary 
WHERE attendance_percentage < 75 
ORDER BY attendance_percentage;

-- Example 4: Get today's attendance for a class
SELECT s.student_id, s.student_name, 
       COALESCE(a.status, 'not marked') AS status
FROM students s
JOIN enrollments e ON s.student_id = e.student_id
LEFT JOIN attendance a ON s.student_id = a.student_id 
  AND a.class_code = e.class_code 
  AND a.attendance_date = CURDATE()
WHERE e.class_code = 'BCA-1-A'
ORDER BY s.student_id;

-- Example 5: Get class-wise statistics
SELECT * FROM class_attendance_summary;
*/
